# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  imageUri: String
  bio: String
  status: String
  Setting1: String #theme true === light
  Setting2: String
  Setting3: String
  Setting4: Boolean
  Setting5: Boolean
  systemID: ID @index(name: "bySystem", sortKeyFields: ["id"])
  system: System @hasOne (fields: ["systemID"])
  hospital: [Hospital] @manyToMany (relationName: "HospitalUser")
  hospID: ID @index(name: "byHosp", sortKeyFields: ["id"])
  hosp: Hospital @hasOne (fields: ["hospID"])
  groups: [Group] @manyToMany (relationName: "GroupUser")
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["id"])
  department: Department @hasOne (fields: ["departmentID"])
  role: [Role] @manyToMany (relationName: "RoleUser")
  quals: [Qual] @manyToMany (relationName: "QualUser")
  shifts: [Shift] @hasMany(indexName: "byUser", fields: "id")
  messageSent: [Message] @hasMany(indexName: "byUser", fields: "id")
  messageRec: [Message] @hasMany(indexName: "byOtherUser", fields: "id")
  announcements: [Announcement] @hasMany(indexName: "byCreatedBy", fields: "id")
  events: [Event] @manyToMany (relationName: "EventUser")
  primaryRoleID: ID @index(name: "byPrimaryRole", sortKeyFields: ["id"])
  primaryRole: Role @hasOne (fields: ["primaryRoleID"]) }

type Role @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  title: String #nurse, tech, doctor, 
  details: String
  icon: String
  color: String
  imageUri: String
  acronym: String
  hospitalID: ID @index(name: "byHospital", sortKeyFields: ["id"])
  hospital: Hospital @hasOne (fields: ["hospitalID"])
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["id"])
  department: Department @hasOne (fields: ["departmentID"])
  people: [User] @manyToMany (relationName: "RoleUser")
  peeps: [User] @hasMany(indexName: "byPrimaryRole", fields: "id")
  quals: [Qual] @hasMany(indexName: "byRole", fields: "id")
  activeShifts: [Shift] @hasMany(indexName: "byRole", fields: "id")
}

type Qual @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  title: String #CCT, charge, ems, manager
  roleID: ID @index(name: "byRole", sortKeyFields: ["id"])
  role: Role @hasOne (fields: ["roleID"])
  abbreviation: String
  details: String 
  people: [User] @manyToMany (relationName: "QualUser")
}

type System @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String #Harris Health, Memorial Hermann
  hospitals: [Hospital] @hasMany(indexName: "bySystem", fields: "id")
  website: String
  imageUri: String
}

type Hospital @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String #LBJ, HM, Ben Taub
  abbreviation: String
  systemID: ID @index(name: "bySystem", sortKeyFields: ["id"])
  system: System @hasOne (fields: ["systemID"])
  departments: [Department] @hasMany(indexName: "byHospital", fields: "id")
  people: [User] @manyToMany (relationName: "HospitalUser")
  streetNum: String
  streetAddress: String
  city: String
  state: String
  postalCode: String
  phone: String
  color: String
  imageUri: String
  roles: [Role] @hasMany(indexName: "byHospital", fields: "id")
}

type Department @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String #ER, ICU, MS
  abbreviation: String
  hospitalID: ID @index(name: "byHospital", sortKeyFields: ["id"])
  hospital: Hospital @hasOne (fields: ["hospitalID"])
  shifts: [Shift] @hasMany (indexName: "byDepartment", fields: "id")
  roles: [Role] @hasMany(indexName: "byDepartment", fields: "id")
  members: [User] @hasMany(indexName: "byDepartment", fields: "id")
  color: String
  imageUri: String
}

type Shift @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  createdByID: ID @index(name: "byCreatedBy", sortKeyFields: ["id"])
  createdBy: User @hasOne (fields: ["createdByID"])
  name: String
  notes: String
  systemID: ID @index(name: "bySystem", sortKeyFields: ["id"])
  system: System @hasOne (fields: ["systemID"])
  hospitalID: ID @index(name: "byHospital", sortKeyFields: ["id"])
  hospital: Hospital @hasOne (fields: ["hospitalID"])
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["id"])
  department: Department @hasOne (fields: ["departmentID"])
  roleID: ID @index(name: "byRole", sortKeyFields: ["id"])
  role: Role @hasOne (fields: ["roleID"])
  announcementID: ID @index(name: "byAnnouncement", sortKeyFields: ["id"])
  announcement: Announcement @hasOne (fields: ["announcementID"])
  qual: [Qual]
  date: String
  dateOrder: AWSDateTime
  month: Int
  year: Int
  startTime: String
  startAMPM: String
  endTime: String
  endAMPM: String
  payMultiplier: Float
  payRate: Float
  payAddToShift: Float
  payAddToHour: Float
  status: String #open, pending, approved, denied, expired
  userID: ID @index(name: "byUser", sortKeyFields: ["id"])
  user: User @hasOne (fields: ["userID"]) #this is who is working the shift
  priority: String
  numNeeded: Int
  trade: Boolean
  giveUp: Boolean
  approved: String
  shiftType: String
  isStartDayNight: String
  isEndDayNIght: String
  pickUpNote: String
}

type Announcement @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String @index(name: "announcementsByDate", queryField: "announcementByDate", sortKeyFields: ["updatedAt"]  )
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  createdByID: ID @index(name: "byCreatedBy", sortKeyFields: ["id"])
  createdBy: User @hasOne (fields: ["createdByID"])
  systemID: ID @index(name: "bySystem", sortKeyFields: ["id"])
  system: System @hasOne (fields: ["systemID"])
  hospitalID: ID @index(name: "byHospital", sortKeyFields: ["id"])
  hospital: Hospital @hasOne (fields: ["hospitalID"])
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["id"])
  department: Department @hasOne (fields: ["departmentID"])
  roleID: ID @index(name: "byRole", sortKeyFields: ["id"])
  role: Role @hasOne (fields: ["roleID"])
  title: String
  accouncement: String
  notes: String
  priority: String
  reactions: [Reaction] @hasMany(indexName: "byAnnouncement", fields: ["id"])
  replies: [AnnouncementReply] @hasMany(indexName: "byAccouncement", fields: ["id"])
  duration: Int
  expire: Boolean
  category: String
  link: String
  shifts: [Shift] @hasMany(indexName: "byAnnouncement", fields: ["id"])
  sort: String #type of announcement
}

type Reaction @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth( rules: [{ allow: private, operations: [create, delete, update, read]}])
{
  id: ID!
  type: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userID: ID @index(name: "byUser", sortKeyFields: ["id"])
  user: User @hasOne (fields: ["userID"])
  reaction: String
  icon: String
  announcement: Announcement @hasOne (fields: ["announcementID"])
  announcementID: ID @index(name: "byAnnouncement", sortKeyFields: ["id"])
  event: Event @hasOne (fields: ["eventID"])
  eventID: ID @index(name: "byEvent", sortKeyFields: ["id"])
}

type Message @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String 
      @index(name: "messagesByDate", queryField: "messagesByDate", sortKeyFields: ["createdAt"]  )
      @index(name: "messagesByUpdatedDate", queryField: "messagesByUpdatedDate", sortKeyFields: ["updatedAt"]  )
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    title: String
    subtitle: String
    content: String
    user: User @hasOne (fields: ["userID"])
    userID: ID @index(name: "byUser", sortKeyFields: ["id"])
    otherUserID: ID @index(name: "byOtherUser", sortKeyFields: ["id"])
    otherUser: User @hasOne (fields: ["otherUserID"])
    isReadbyUser: Boolean
    isReadByOtherUser: Boolean
    replies: [MessageReply] @hasMany(indexName: "byMessage", fields: ["id"])
    request: String
    status: String
    groupID: ID @index(name: "byGroup", sortKeyFields: ["id"])
    group: Group @hasOne (fields: ["groupID"])
}

type MessageReply @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String @index(name: "repliesByDate", queryField: "repliesByDate", sortKeyFields: ["createdAt"]  )
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    content: String
    isRead: Boolean
    messageID: ID! @index(name: "byMessage", sortKeyFields: ["id"])
    message: Message @hasOne (fields: ["messageID"])
    user: User @hasOne (fields: ["userID"])
    userID: ID @index(name: "byUser", sortKeyFields: ["id"])
}

type AnnouncementReply @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}])
  {
    id: ID!
    type: String @index(name: "AnnouncementRepliesByDate", queryField: "AnnouncementRepliesByDate", sortKeyFields: ["createdAt"]  )
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    content: String
    isRead: Boolean
    announcementID: ID! @index(name: "byAccouncement", sortKeyFields: ["id"])
    announcement: Announcement @hasOne (fields: ["announcementID"])
    user: User @hasOne (fields: ["userID"])
    userID: ID @index(name: "byUser", sortKeyFields: ["id"])
}

type Event @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  title: String
  details: String
  notes: String
  imageUri: String
  link: String
  status: String
  priority: String
  systemID: ID @index(name: "bySystem", sortKeyFields: ["id"])
  system: System @hasOne (fields: ["systemID"])
  hospitalID: ID @index(name: "byHospital", sortKeyFields: ["id"])
  hospital: Hospital @hasOne (fields: ["hospitalID"])
  departmentID: ID @index(name: "byDepartment", sortKeyFields: ["id"])
  department: Department @hasOne (fields: ["departmentID"])
  roleID: ID @index(name: "byRole", sortKeyFields: ["id"])
  role: Role @hasOne (fields: ["roleID"])
  qualID: ID @index(name: "byQual", sortKeyFields: ["id"])
  qual: Qual @hasOne (fields: ["qualID"])
  date: String
  month: Int
  year: Int
  startTime: Int
  startAMPM: String
  endTime: Int
  endAMPM: String
  reaction: [Reaction] @hasMany(indexName: "byEvent", fields: ["id"])
  people: [User] @manyToMany (relationName: "EventUser")
}

type Group @model (timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @auth(rules: [{ allow: private, operations: [create, delete, update, read]}]) {
  type: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  name: String 
  members: [User] @manyToMany (relationName: "GroupUser")
  color: String
  imageUri: String
  messages: [Message] @hasMany(indexName: "byGroup", fields: ["id"])
}